(window.webpackJsonp=window.webpackJsonp||[]).push([[14],{433:function(s,n,a){"use strict";a.r(n);var e=a(24),t=Object(e.a)({},(function(){var s=this,n=s.$createElement,a=s._self._c||n;return a("ContentSlotsDistributor",{attrs:{"slot-key":s.$parent.slotKey}},[a("h2",{attrs:{id:"即将过期的生命周期"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#即将过期的生命周期"}},[s._v("#")]),s._v(" 即将过期的生命周期")]),s._v(" "),a("hr"),s._v(" "),a("ul",[a("li",[a("p",[a("code",[s._v("componentWillMount")])])]),s._v(" "),a("li",[a("p",[a("code",[s._v("componentWillReceiveProps")])])]),s._v(" "),a("li",[a("p",[a("code",[s._v("componentWillUpdate")])])])]),s._v(" "),a("h3",{attrs:{id:"步骤"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#步骤"}},[s._v("#")]),s._v(" 步骤")]),s._v(" "),a("hr"),s._v(" "),a("ul",[a("li",[a("strong",[s._v("16.3")]),s._v("：为不安全的生命周期引入别名，"),a("code",[s._v("UNSAFE_componentWillMount")]),s._v("、"),a("code",[s._v("UNSAFE_componentWillReceiveProps")]),s._v(" 和 "),a("code",[s._v("UNSAFE_componentWillUpdate")]),s._v("。（旧的生命周期名称和新的别名都可以在此版本中使用。）")]),s._v(" "),a("li",[a("strong",[s._v("未来 16.x 版本")]),s._v("：为 "),a("code",[s._v("componentWillMount")]),s._v("、"),a("code",[s._v("componentWillReceiveProps")]),s._v(" 和 "),a("code",[s._v("componentWillUpdate")]),s._v(" 启用废弃告警。（旧的生命周期名称和新的别名都将在这个版本中工作，但是旧的名称在开发模式下会产生一个警告。）")]),s._v(" "),a("li",[a("strong",[s._v("17.0")]),s._v("：删除 "),a("code",[s._v("componentWillMount")]),s._v("、"),a("code",[s._v("componentWillReceiveProps")]),s._v(" 和 "),a("code",[s._v("componentWillUpdate")]),s._v("。（在此版本之后，只有新的 “UNSAFE_” 生命周期名称可以使用。）")])]),s._v(" "),a("p",[s._v("直接对项目代码进行重构")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("cd your_project\nnpx react-codemod rename-unsafe-lifecycles\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br")])]),a("h3",{attrs:{id:"新的生命周期：getderivedstatefromprops"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#新的生命周期：getderivedstatefromprops"}},[s._v("#")]),s._v(" 新的生命周期："),a("code",[s._v("getDerivedStateFromProps")])]),s._v(" "),a("hr"),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("class Example extends React.Component {\n  static getDerivedStateFromProps(props, state) {\n    // ...\n  }\n}\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br")])]),a("p",[s._v("新的静态 "),a("code",[s._v("getDerivedStateFromProps")]),s._v(" 生命周期方法在组件实例化之后以及重新渲染之前调用。它可以返回一个对象来更新 "),a("code",[s._v("state")]),s._v("，或者返回 "),a("code",[s._v("null")]),s._v(" 来表示新的 "),a("code",[s._v("props")]),s._v(" 不需要任何 "),a("code",[s._v("state")]),s._v(" 的更新。")]),s._v(" "),a("h3",{attrs:{id:"新的生命周期：getsnapshotbeforeupdate"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#新的生命周期：getsnapshotbeforeupdate"}},[s._v("#")]),s._v(" 新的生命周期："),a("code",[s._v("getSnapshotBeforeUpdate")])]),s._v(" "),a("hr"),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("class Example extends React.Component {\n  getSnapshotBeforeUpdate(prevProps, prevState) {\n    // ...\n  }\n}\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br")])]),a("p",[s._v("新的 "),a("code",[s._v("getSnapshotBeforeUpdate")]),s._v(" 生命周期方法在更新之前（如：更新 DOM 之前）被调用。此生命周期的返回值将作为第三个参数传递给 "),a("code",[s._v("componentDidUpdate")]),s._v("。（通常不需要，但在重新渲染过程中手动保留滚动位置等情况下非常有用。）")]),s._v(" "),a("h2",{attrs:{id:"实例"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#实例"}},[s._v("#")]),s._v(" 实例")]),s._v(" "),a("h3",{attrs:{id:"_1-初始化-state"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1-初始化-state"}},[s._v("#")]),s._v(" 1. 初始化 state")]),s._v(" "),a("hr"),s._v(" "),a("blockquote",[a("p",[s._v("方式 1")])]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("class ExampleComponent extends React.Component {\n  \tstate = {};\n\n  \tcomponentWillMount() {\n  \t\tthis.setState({\n  \t\tcurrentColor: this.props.defaultColor,\n  \t\tpalette: 'rgb',\n  \t});\n}}\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br")])]),a("blockquote",[a("p",[s._v("方式 2")])]),s._v(" "),a("p",[s._v("对于这种类型的组件，最简单的重构是将 state 的初始化，移到构造函数或属性的初始化器内，如下所示：")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("// After\nclass ExampleComponent extends React.Component {\n  state = {\n      currentColor: this.props.defaultColor,\n      palette: 'rgb',\n  };\n }\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br")])]),a("h3",{attrs:{id:"_2-获取外部数据-示例写法-怎么显示-loading-状态"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2-获取外部数据-示例写法-怎么显示-loading-状态"}},[s._v("#")]),s._v(" 2. 获取外部数据(示例写法,怎么显示 Loading 状态)")]),s._v(" "),a("hr"),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("// Before\nclass ExampleComponent extends React.Component {\n  state = {\n    externalData: null,\t\t\t\t//用于定义获取外部数据\n  };\n\n  componentWillMount() {\n  \t\t  //this._asyncRequest的作用是为了在组件卸载的时候清除掉这个方法,Promise的then方法返回的是什么??\n  \t\t  //loadMyAsyncData()是promise的请求方法\n      this._asyncRequest = loadMyAsyncData().then(externalData => {\n      \t  this._asyncRequest = null;\n          this.setState({externalData});\n       });\n  }\n  componentWillUnmount() {\n    if (this._asyncRequest) {\n      this._asyncRequest.cancel();\n    }\n  }\n\n  render() {\n \t  //用于显示Loading状态\n    if (this.state.externalData === null) {\n      // 渲染加载状态 ...\n    } else {\n      // 渲染真实 UI ...\n    }\n  }\n}\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br"),a("span",{staticClass:"line-number"},[s._v("12")]),a("br"),a("span",{staticClass:"line-number"},[s._v("13")]),a("br"),a("span",{staticClass:"line-number"},[s._v("14")]),a("br"),a("span",{staticClass:"line-number"},[s._v("15")]),a("br"),a("span",{staticClass:"line-number"},[s._v("16")]),a("br"),a("span",{staticClass:"line-number"},[s._v("17")]),a("br"),a("span",{staticClass:"line-number"},[s._v("18")]),a("br"),a("span",{staticClass:"line-number"},[s._v("19")]),a("br"),a("span",{staticClass:"line-number"},[s._v("20")]),a("br"),a("span",{staticClass:"line-number"},[s._v("21")]),a("br"),a("span",{staticClass:"line-number"},[s._v("22")]),a("br"),a("span",{staticClass:"line-number"},[s._v("23")]),a("br"),a("span",{staticClass:"line-number"},[s._v("24")]),a("br"),a("span",{staticClass:"line-number"},[s._v("25")]),a("br"),a("span",{staticClass:"line-number"},[s._v("26")]),a("br"),a("span",{staticClass:"line-number"},[s._v("27")]),a("br"),a("span",{staticClass:"line-number"},[s._v("28")]),a("br"),a("span",{staticClass:"line-number"},[s._v("29")]),a("br")])]),a("p",[s._v("上述代码对于服务器渲染（不使用外部数据）和即将推出的异步渲染模式（可能多次启动请求）都存在问题。")]),s._v(" "),a("p",[s._v("大多数用例推荐的升级方式是将数据获取移到 "),a("code",[s._v("componentDidMount")]),s._v("：")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("// After\nclass ExampleComponent extends React.Component {\n  state = {\n    externalData: null,\n  };\n\n  componentDidMount() {\n      this._asyncRequest = loadMyAsyncData().then(externalData => {\n              this._asyncRequest = null;\n              this.setState({externalData});\n       });\n  }\n  componentWillUnmount() {\n    if (this._asyncRequest) {\n      this._asyncRequest.cancel();\n    }\n  }\n\n  render() {\n    if (this.state.externalData === null) {\n      // 渲染加载状态 ...\n    } else {\n      // 渲染真实 UI ...\n    }\n  }\n}\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br"),a("span",{staticClass:"line-number"},[s._v("12")]),a("br"),a("span",{staticClass:"line-number"},[s._v("13")]),a("br"),a("span",{staticClass:"line-number"},[s._v("14")]),a("br"),a("span",{staticClass:"line-number"},[s._v("15")]),a("br"),a("span",{staticClass:"line-number"},[s._v("16")]),a("br"),a("span",{staticClass:"line-number"},[s._v("17")]),a("br"),a("span",{staticClass:"line-number"},[s._v("18")]),a("br"),a("span",{staticClass:"line-number"},[s._v("19")]),a("br"),a("span",{staticClass:"line-number"},[s._v("20")]),a("br"),a("span",{staticClass:"line-number"},[s._v("21")]),a("br"),a("span",{staticClass:"line-number"},[s._v("22")]),a("br"),a("span",{staticClass:"line-number"},[s._v("23")]),a("br"),a("span",{staticClass:"line-number"},[s._v("24")]),a("br"),a("span",{staticClass:"line-number"},[s._v("25")]),a("br"),a("span",{staticClass:"line-number"},[s._v("26")]),a("br")])]),a("blockquote",[a("p",[s._v("Key:将数据获取移到 "),a("code",[s._v("componentDidMount")])])]),s._v(" "),a("h3",{attrs:{id:"_3-基于-props-更新-state-面试当中常常会问的优化方法"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_3-基于-props-更新-state-面试当中常常会问的优化方法"}},[s._v("#")]),s._v(" 3. 基于 "),a("code",[s._v("props")]),s._v(" 更新 "),a("code",[s._v("state")]),s._v("(面试当中常常会问的优化方法)")]),s._v(" "),a("hr"),s._v(" "),a("div",{staticClass:"custom-block warning"},[a("p",[s._v("注意：")]),s._v(" "),a("p",[s._v("旧的 "),a("code",[s._v("componentWillReceiveProps")]),s._v(" 和新的 "),a("code",[s._v("getDerivedStateFromProps")]),s._v(" 方法都会给组件增加明显的复杂性。这通常会导致 "),a("a",{attrs:{href:"https://zh-hans.reactjs.org/blog/2018/06/07/you-probably-dont-need-derived-state.html#common-bugs-when-using-derived-state",target:"_blank",rel:"noopener noreferrer"}},[s._v("bug"),a("OutboundLink")],1),s._v("。考虑 "),a("strong",[a("a",{attrs:{href:"https://zh-hans.reactjs.org/blog/2018/06/07/you-probably-dont-need-derived-state.html",target:"_blank",rel:"noopener noreferrer"}},[s._v("派生 state 的简单替代方法"),a("OutboundLink")],1)]),s._v(" 使组件可预测且可维护。")])]),s._v(" "),a("p",[s._v("这是一个示例，组件使用过时的 "),a("code",[s._v("componentWillReceiveProps")]),s._v(" 生命周期基于新的 "),a("code",[s._v("props")]),s._v(" 更新 "),a("code",[s._v("state")]),s._v("：")]),s._v(" "),a("div",{staticClass:"language-jsx line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-jsx"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// Before")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("class")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("ExampleComponent")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("extends")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("React"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("Component")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n  state "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n    isScrollingDown"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token boolean"}},[s._v("false")]),s._v("\n  "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n\n  "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("componentWillReceiveProps")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token parameter"}},[s._v("nextProps")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("if")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("this")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("props"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("currentRow "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("!==")]),s._v(" nextProps"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("currentRow"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n      "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("this")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("setState")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n        isScrollingDown"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v(" nextProps"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("currentRow "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("this")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("props"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("currentRow\n      "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n  "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br"),a("span",{staticClass:"line-number"},[s._v("12")]),a("br"),a("span",{staticClass:"line-number"},[s._v("13")]),a("br"),a("span",{staticClass:"line-number"},[s._v("14")]),a("br")])]),a("p",[s._v("尽管上面的代码本身没有问题，但是 "),a("code",[s._v("componentWillReceiveProps")]),s._v(" 生命周期经常被误用，"),a("em",[s._v("会")]),s._v(" 产生问题。因此，该方法将被废弃。")]),s._v(" "),a("p",[s._v("从 16.3 版本开始，当 "),a("code",[s._v("props")]),s._v(" 变化时，建议使用新的 "),a("code",[s._v("static getDerivedStateFromProps")]),s._v(" 生命周期更新 "),a("code",[s._v("state")]),s._v("。创建组件以及每次组件由于 props 或 state 的改变而重新渲染时都会调用该生命周期：")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("// After\nclass ExampleComponent extends React.Component {\n  // 在构造函数中初始化 state，\n  // 或者使用属性初始化器。\n  state = {\n      isScrollingDown: false,\n      lastRow: null,\n  };\n  //新的生命周期函数\n  static getDerivedStateFromProps(props, state) {\n      if (props.currentRow !== state.lastRow) {\n          return {\n              isScrollingDown: props.currentRow > state.lastRow,\n              lastRow: props.currentRow,\n      };\n  }\n    // 返回 null 表示无需更新 state。\n    return null;\n  }\n}\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br"),a("span",{staticClass:"line-number"},[s._v("12")]),a("br"),a("span",{staticClass:"line-number"},[s._v("13")]),a("br"),a("span",{staticClass:"line-number"},[s._v("14")]),a("br"),a("span",{staticClass:"line-number"},[s._v("15")]),a("br"),a("span",{staticClass:"line-number"},[s._v("16")]),a("br"),a("span",{staticClass:"line-number"},[s._v("17")]),a("br"),a("span",{staticClass:"line-number"},[s._v("18")]),a("br"),a("span",{staticClass:"line-number"},[s._v("19")]),a("br"),a("span",{staticClass:"line-number"},[s._v("20")]),a("br")])]),a("h3",{attrs:{id:"_4-调用外部回调-调用了传递给子组件的函数"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_4-调用外部回调-调用了传递给子组件的函数"}},[s._v("#")]),s._v(" 4. 调用外部回调(调用了传递给子组件的函数)")]),s._v(" "),a("hr"),s._v(" "),a("p",[s._v("下面是一个组件的示例，它在内部 state 发生变化时调用了外部函数：")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("// Before\nclass ExampleComponent extends React.Component {\n  componentWillUpdate(nextProps, nextState) {\n      if (\n         this.state.someStatefulValue !== nextState.someStatefulValue\n      ) {\n      \t//外部函数\n         nextProps.onChange(nextState.someStatefulValue);\n      }\n  }\n}\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br")])]),a("p",[s._v("有时人们使用 "),a("code",[s._v("componentWillUpdate")]),s._v(" 是出于一种错误的担心，即当 "),a("code",[s._v("componentDidUpdate")]),s._v(" 触发时，更新其他组件的 state 已经”太晚”了。事实并非如此。React 可确保在用户看到更新的 UI 之前，刷新在 "),a("code",[s._v("componentDidMount")]),s._v(" 和 "),a("code",[s._v("componentDidUpdate")]),s._v(" 期间发生的任何 "),a("code",[s._v("setState")]),s._v(" 调用。通常，最好避免这样的级联更新，但在某些情况下，这些更新是必需的（例如：如果你需要在测量渲染的 DOM 元素后，定位工具的提示）。")]),s._v(" "),a("p",[s._v("不管怎样，在异步模式下使用 "),a("code",[s._v("componentWillUpdate")]),s._v(" 都是不安全的，因为外部回调可能会在一次更新中被多次调用。相反，应该使用 "),a("code",[s._v("componentDidUpdate")]),s._v(" 生命周期，因为它保证每次更新只调用一次：")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("// After\nclass ExampleComponent extends React.Component {\n  componentDidUpdate(prevProps, prevState) {\n      if (  this.state.someStatefulValue !==  prevState.someStatefulValue   ) {      \t\t\t\tthis.props.onChange(this.state.someStatefulValue);\n      }\n  }\n}\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br")])]),a("div",{staticClass:"custom-block tip"},[a("p",[s._v("key:意思就是放到 did 和 will 里面都是一样的结果")])]),s._v(" "),a("h3",{attrs:{id:"_5-props-更新的副作用-不甚理解"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_5-props-更新的副作用-不甚理解"}},[s._v("#")]),s._v(" 5. props 更新的副作用(不甚理解)")]),s._v(" "),a("hr"),s._v(" "),a("p",[s._v("类似于"),a("a",{attrs:{href:"https://zh-hans.reactjs.org/blog/2018/03/27/update-on-async-rendering.html#invoking-external-callbacks",target:"_blank",rel:"noopener noreferrer"}},[s._v("上面的例子"),a("OutboundLink")],1),s._v("，有时候组件在 "),a("code",[s._v("props")]),s._v(" 发生变化时会产生副作用。")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("// Before\nclass ExampleComponent extends React.Component {\n  componentWillReceiveProps(nextProps) {\n      if (this.props.isVisible !== nextProps.isVisible)\n      {\n            logVisibleChange(nextProps.isVisible);\n      }\n }}\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br")])]),a("p",[s._v("与 "),a("code",[s._v("componentWillUpdate")]),s._v(" 类似，"),a("code",[s._v("componentWillReceiveProps")]),s._v(" 可能在一次更新中被多次调用。因此，避免在此方法中产生副作用非常重要。相反，应该使用 "),a("code",[s._v("componentDidUpdate")]),s._v("，因为它保证每次更新只调用一次：")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("// After\nclass ExampleComponent extends React.Component {\n  componentDidUpdate(prevProps, prevState) {\n      if (this.props.isVisible !== prevProps.isVisible) {\n            logVisibleChange(this.props.isVisible);\n      }\n  }\n}\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br")])]),a("h3",{attrs:{id:"_6-props-更新时获取外部数据-用途-sku-获取二级新闻列表-二级菜单"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_6-props-更新时获取外部数据-用途-sku-获取二级新闻列表-二级菜单"}},[s._v("#")]),s._v(" 6. props 更新时获取外部数据(用途:SKU/获取二级新闻列表/二级菜单)")]),s._v(" "),a("hr"),s._v(" "),a("p",[s._v("下面是一个组件的示例，它根据 "),a("code",[s._v("props")]),s._v(" 的值获取外部数据：")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("// Before\nclass ExampleComponent extends React.Component {\n  state = {\n    externalData: null,\n  };\n  //加载数据\n  componentDidMount() {\n    this._loadAsyncData(this.props.id);\n  }\n  //请求数据\n  componentWillReceiveProps(nextProps) {\n      if (nextProps.id !== this.props.id) {\n      \t  //先清除,再请求\n          this.setState({externalData: null});\n          this._loadAsyncData(nextProps.id);\n      }\n  }\n  componentWillUnmount() {\n    if (this._asyncRequest) {\n      this._asyncRequest.cancel();\n    }\n  }\n\n  render() {\n    if (this.state.externalData === null) {\n      // 渲染加载状态 ...\n    } else {\n      // 渲染真实 UI ...\n    }\n  }\n//根据id获取的加载方法\n  _loadAsyncData(id) {\n    this._asyncRequest = loadMyAsyncData(id).then(\n      externalData => {\n        this._asyncRequest = null;\n        this.setState({externalData});\n      }\n    );\n  }\n}\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br"),a("span",{staticClass:"line-number"},[s._v("12")]),a("br"),a("span",{staticClass:"line-number"},[s._v("13")]),a("br"),a("span",{staticClass:"line-number"},[s._v("14")]),a("br"),a("span",{staticClass:"line-number"},[s._v("15")]),a("br"),a("span",{staticClass:"line-number"},[s._v("16")]),a("br"),a("span",{staticClass:"line-number"},[s._v("17")]),a("br"),a("span",{staticClass:"line-number"},[s._v("18")]),a("br"),a("span",{staticClass:"line-number"},[s._v("19")]),a("br"),a("span",{staticClass:"line-number"},[s._v("20")]),a("br"),a("span",{staticClass:"line-number"},[s._v("21")]),a("br"),a("span",{staticClass:"line-number"},[s._v("22")]),a("br"),a("span",{staticClass:"line-number"},[s._v("23")]),a("br"),a("span",{staticClass:"line-number"},[s._v("24")]),a("br"),a("span",{staticClass:"line-number"},[s._v("25")]),a("br"),a("span",{staticClass:"line-number"},[s._v("26")]),a("br"),a("span",{staticClass:"line-number"},[s._v("27")]),a("br"),a("span",{staticClass:"line-number"},[s._v("28")]),a("br"),a("span",{staticClass:"line-number"},[s._v("29")]),a("br"),a("span",{staticClass:"line-number"},[s._v("30")]),a("br"),a("span",{staticClass:"line-number"},[s._v("31")]),a("br"),a("span",{staticClass:"line-number"},[s._v("32")]),a("br"),a("span",{staticClass:"line-number"},[s._v("33")]),a("br"),a("span",{staticClass:"line-number"},[s._v("34")]),a("br"),a("span",{staticClass:"line-number"},[s._v("35")]),a("br"),a("span",{staticClass:"line-number"},[s._v("36")]),a("br"),a("span",{staticClass:"line-number"},[s._v("37")]),a("br"),a("span",{staticClass:"line-number"},[s._v("38")]),a("br"),a("span",{staticClass:"line-number"},[s._v("39")]),a("br"),a("span",{staticClass:"line-number"},[s._v("40")]),a("br")])]),a("p",[s._v("此组件的推荐升级路径是将数据更新移动到 "),a("code",[s._v("componentDidUpdate")]),s._v("。你还可以使用新的 "),a("code",[s._v("getDerivedStateFromProps")]),s._v(" 生命周期，在渲染新的 props 之前清除旧数据：")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("// After\nclass ExampleComponent extends React.Component {\n  state = {\n    externalData: null,\n  };\n  //新的生命周期函数\n  static getDerivedStateFromProps(props, state) {\n      // 保存 prevId 在 state 中，以便我们在 props 变化时进行对比。\n      // 清除之前加载的数据（这样我们就不会渲染旧的内容）。\n      if (props.id !== state.prevId) {\n          return {\n              externalData: null,\n              prevId: props.id,\n          };\n      }\n      // 无需更新 state\n      return null;\n  }\n  componentDidMount() {\n    this._loadAsyncData(this.props.id);\n  }\n\n  componentDidUpdate(prevProps, prevState) {\n      if (this.state.externalData === null) {\n            this._loadAsyncData(this.props.id);\n      }\n  }\n  componentWillUnmount() {\n    if (this._asyncRequest) {\n      this._asyncRequest.cancel();\n    }\n  }\n\n  render() {\n    if (this.state.externalData === null) {\n      // 渲染加载状态 ...\n    } else {\n      // 渲染真实 UI ...\n    }\n  }\n\n  _loadAsyncData(id) {\n    this._asyncRequest = loadMyAsyncData(id).then(\n      externalData => {\n        this._asyncRequest = null;\n        this.setState({externalData});\n      }\n    );\n  }\n}\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br"),a("span",{staticClass:"line-number"},[s._v("12")]),a("br"),a("span",{staticClass:"line-number"},[s._v("13")]),a("br"),a("span",{staticClass:"line-number"},[s._v("14")]),a("br"),a("span",{staticClass:"line-number"},[s._v("15")]),a("br"),a("span",{staticClass:"line-number"},[s._v("16")]),a("br"),a("span",{staticClass:"line-number"},[s._v("17")]),a("br"),a("span",{staticClass:"line-number"},[s._v("18")]),a("br"),a("span",{staticClass:"line-number"},[s._v("19")]),a("br"),a("span",{staticClass:"line-number"},[s._v("20")]),a("br"),a("span",{staticClass:"line-number"},[s._v("21")]),a("br"),a("span",{staticClass:"line-number"},[s._v("22")]),a("br"),a("span",{staticClass:"line-number"},[s._v("23")]),a("br"),a("span",{staticClass:"line-number"},[s._v("24")]),a("br"),a("span",{staticClass:"line-number"},[s._v("25")]),a("br"),a("span",{staticClass:"line-number"},[s._v("26")]),a("br"),a("span",{staticClass:"line-number"},[s._v("27")]),a("br"),a("span",{staticClass:"line-number"},[s._v("28")]),a("br"),a("span",{staticClass:"line-number"},[s._v("29")]),a("br"),a("span",{staticClass:"line-number"},[s._v("30")]),a("br"),a("span",{staticClass:"line-number"},[s._v("31")]),a("br"),a("span",{staticClass:"line-number"},[s._v("32")]),a("br"),a("span",{staticClass:"line-number"},[s._v("33")]),a("br"),a("span",{staticClass:"line-number"},[s._v("34")]),a("br"),a("span",{staticClass:"line-number"},[s._v("35")]),a("br"),a("span",{staticClass:"line-number"},[s._v("36")]),a("br"),a("span",{staticClass:"line-number"},[s._v("37")]),a("br"),a("span",{staticClass:"line-number"},[s._v("38")]),a("br"),a("span",{staticClass:"line-number"},[s._v("39")]),a("br"),a("span",{staticClass:"line-number"},[s._v("40")]),a("br"),a("span",{staticClass:"line-number"},[s._v("41")]),a("br"),a("span",{staticClass:"line-number"},[s._v("42")]),a("br"),a("span",{staticClass:"line-number"},[s._v("43")]),a("br"),a("span",{staticClass:"line-number"},[s._v("44")]),a("br"),a("span",{staticClass:"line-number"},[s._v("45")]),a("br"),a("span",{staticClass:"line-number"},[s._v("46")]),a("br"),a("span",{staticClass:"line-number"},[s._v("47")]),a("br"),a("span",{staticClass:"line-number"},[s._v("48")]),a("br"),a("span",{staticClass:"line-number"},[s._v("49")]),a("br"),a("span",{staticClass:"line-number"},[s._v("50")]),a("br")])]),a("div",{staticClass:"custom-block tip"},[a("p",[s._v("注意")]),s._v(" "),a("p",[s._v("如果你正在使用支持取消的 HTTP 库，例如 "),a("a",{attrs:{href:"https://www.npmjs.com/package/axios",target:"_blank",rel:"noopener noreferrer"}},[s._v("axios"),a("OutboundLink")],1),s._v(" 那么在卸载时取消正在进行的请求非常简单。对于原生的 Promise，你可以使用类似"),a("a",{attrs:{href:"https://gist.github.com/bvaughn/982ab689a41097237f6e9860db7ca8d6",target:"_blank",rel:"noopener noreferrer"}},[s._v("此处所示"),a("OutboundLink")],1),s._v("的方法。")])]),s._v(" "),a("h3",{attrs:{id:"_7-更新前读取-dom-属性-主要学习新的生命周期"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_7-更新前读取-dom-属性-主要学习新的生命周期"}},[s._v("#")]),s._v(" 7. 更新前读取 DOM 属性(主要学习新的生命周期)")]),s._v(" "),a("hr"),s._v(" "),a("p",[s._v("这个的效果类似在顶部添加数据,重新进入页面之后,滚动条自动滚动到之前的位置")]),s._v(" "),a("p",[s._v("下面是一个组件的示例，该组件在更新之前从 DOM 中读取属性，以便在列表中保持滚动的位置：")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("class ScrollingList extends React.Component {\n  listRef = null;\n  previousScrollOffset = null;\n\n  componentWillUpdate(nextProps, nextState) {\n  // 我们正在向列表中添加新项吗？    // 捕获滚动位置，以便我们稍后可以调整滚动位置。\n      if (this.props.list.length < nextProps.list.length) {\n    \t  this.previousScrollOffset = this.listRef.scrollHeight - this.listRef.scrollTop;\n      }\n  }\n  componentDidUpdate(prevProps, prevState) {\n  // 如果我们刚刚添加了新项，并且设置了 previousScrollOffset。\n  // 调整滚动位置，以便这些新项不会把旧项挤出视图。\n  \tif (this.previousScrollOffset !== null) {\n      \tthis.listRef.scrollTop = this.listRef.scrollHeight - this.previousScrollOffset;      \t  this.previousScrollOffset = null;\n     }\n  }\n  render() {\n    return (\n      <div ref={this.setListRef}>\n        {/* ...内容... */}\n      </div>\n    );\n  }\n\n  setListRef = ref => {\n    this.listRef = ref;\n  };\n}\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br"),a("span",{staticClass:"line-number"},[s._v("12")]),a("br"),a("span",{staticClass:"line-number"},[s._v("13")]),a("br"),a("span",{staticClass:"line-number"},[s._v("14")]),a("br"),a("span",{staticClass:"line-number"},[s._v("15")]),a("br"),a("span",{staticClass:"line-number"},[s._v("16")]),a("br"),a("span",{staticClass:"line-number"},[s._v("17")]),a("br"),a("span",{staticClass:"line-number"},[s._v("18")]),a("br"),a("span",{staticClass:"line-number"},[s._v("19")]),a("br"),a("span",{staticClass:"line-number"},[s._v("20")]),a("br"),a("span",{staticClass:"line-number"},[s._v("21")]),a("br"),a("span",{staticClass:"line-number"},[s._v("22")]),a("br"),a("span",{staticClass:"line-number"},[s._v("23")]),a("br"),a("span",{staticClass:"line-number"},[s._v("24")]),a("br"),a("span",{staticClass:"line-number"},[s._v("25")]),a("br"),a("span",{staticClass:"line-number"},[s._v("26")]),a("br"),a("span",{staticClass:"line-number"},[s._v("27")]),a("br"),a("span",{staticClass:"line-number"},[s._v("28")]),a("br"),a("span",{staticClass:"line-number"},[s._v("29")]),a("br")])]),a("p",[s._v("在上面的示例中，"),a("code",[s._v("componentWillUpdate")]),s._v(" 用于读取 DOM 属性。但是，对于异步渲染，“渲染”阶段的生命周期（如 "),a("code",[s._v("componentWillUpdate")]),s._v(" 和 "),a("code",[s._v("render")]),s._v("）和”提交”阶段的生命周期（如 "),a("code",[s._v("componentDidUpdate")]),s._v("）之间可能存在延迟。如果用户在这段时间内调整窗口大小，那么从 "),a("code",[s._v("componentWillUpdate")]),s._v(" 读取的 "),a("code",[s._v("scrollHeight")]),s._v(" 值将过时。")]),s._v(" "),a("p",[s._v("这个问题的解决方案是使用新的“提交”阶段生命周期 "),a("code",[s._v("getSnapshotBeforeUpdate")]),s._v("。这个方法在发生变化 "),a("em",[s._v("前立即")]),s._v(" 被调用（例如在更新 DOM 之前）。它可以返回一个 React 的值作为参数传递给 "),a("code",[s._v("componentDidUpdate")]),s._v(" 方法，该方法在发生变化 "),a("em",[s._v("后立即")]),s._v(" 被调用。")]),s._v(" "),a("p",[s._v("这两个生命周期可以像这样一起使用：")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("class ScrollingList extends React.Component {\n  listRef = null;\n\t//新的生命周期\n  getSnapshotBeforeUpdate(prevProps, prevState) {\n  // 我们正在向列表中添加新项吗？\n  // 捕获滚动位置，以便我们稍后可以调整滚动位置。\n  if (prevProps.list.length < this.props.list.length) {\n      return (\n      \tthis.listRef.scrollHeight - this.listRef.scrollTop );\n      }\n  \treturn null;\n  }\n\n  componentDidUpdate(prevProps, prevState, snapshot) {\n  // 如果我们刚刚添加了新项，并且有了快照值。\n  // 调整滚动位置，以便这些新项不会把旧项挤出视图。\n  // （此处的快照是从 getSnapshotBeforeUpdate 返回的值）\n  \tif (snapshot !== null) {\n  \t\tthis.listRef.scrollTop = this.listRef.scrollHeight - snapshot;\n  \t}\n  }\n\n  render() {\n    return (\n      <div ref={this.setListRef}>\n        {/* ...内容... */}\n      </div>\n    );\n  }\n\n  setListRef = ref => {\n    this.listRef = ref;\n  };\n}\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br"),a("span",{staticClass:"line-number"},[s._v("12")]),a("br"),a("span",{staticClass:"line-number"},[s._v("13")]),a("br"),a("span",{staticClass:"line-number"},[s._v("14")]),a("br"),a("span",{staticClass:"line-number"},[s._v("15")]),a("br"),a("span",{staticClass:"line-number"},[s._v("16")]),a("br"),a("span",{staticClass:"line-number"},[s._v("17")]),a("br"),a("span",{staticClass:"line-number"},[s._v("18")]),a("br"),a("span",{staticClass:"line-number"},[s._v("19")]),a("br"),a("span",{staticClass:"line-number"},[s._v("20")]),a("br"),a("span",{staticClass:"line-number"},[s._v("21")]),a("br"),a("span",{staticClass:"line-number"},[s._v("22")]),a("br"),a("span",{staticClass:"line-number"},[s._v("23")]),a("br"),a("span",{staticClass:"line-number"},[s._v("24")]),a("br"),a("span",{staticClass:"line-number"},[s._v("25")]),a("br"),a("span",{staticClass:"line-number"},[s._v("26")]),a("br"),a("span",{staticClass:"line-number"},[s._v("27")]),a("br"),a("span",{staticClass:"line-number"},[s._v("28")]),a("br"),a("span",{staticClass:"line-number"},[s._v("29")]),a("br"),a("span",{staticClass:"line-number"},[s._v("30")]),a("br"),a("span",{staticClass:"line-number"},[s._v("31")]),a("br"),a("span",{staticClass:"line-number"},[s._v("32")]),a("br"),a("span",{staticClass:"line-number"},[s._v("33")]),a("br"),a("span",{staticClass:"line-number"},[s._v("34")]),a("br")])]),a("h3",{attrs:{id:"_8-兼容旧版本"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_8-兼容旧版本"}},[s._v("#")]),s._v(" 8. 兼容旧版本")]),s._v(" "),a("hr"),s._v(" "),a("p",[s._v("开源维护者可能想知道这些变化对共享组件意味着什么。如果你实现了上述建议，那么依赖于新的静态 "),a("code",[s._v("getDerivedStateFromProps")]),s._v(" 生命周期的组件会发生什么情况呢？你是否还必须发布一个新的主要版本，删除 React 16.2 以及更旧版本的兼容代码？")]),s._v(" "),a("p",[s._v("幸运的是，你不需要这样做！")]),s._v(" "),a("p",[s._v("当 React 16.3 发布时，我们还将发布一个新的 npm 包，"),a("a",{attrs:{href:"https://github.com/reactjs/react-lifecycles-compat",target:"_blank",rel:"noopener noreferrer"}},[a("code",[s._v("react-lifecycles-compat")]),a("OutboundLink")],1),s._v("。它提供了组件的 polyfill，以便新的 "),a("code",[s._v("getDerivedStateFromProps")]),s._v(" 和 "),a("code",[s._v("getSnapshotBeforeUpdate")]),s._v(" 生命周期也适用于旧版本的 React（0.14.9+）。")]),s._v(" "),a("p",[s._v("要使用此 polyfill，首先将其作为依赖项添加到库中：")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("# Yarn\nyarn add react-lifecycles-compat\n\n# NPM\nnpm install react-lifecycles-compat --save\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br")])]),a("p",[s._v("接下来，更新组件使用新的生命周期（如上所述）。")]),s._v(" "),a("p",[s._v("最后，使用 polyfill 让组件向后兼容旧版本的 React：")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("import React from 'react';\nimport {polyfill} from 'react-lifecycles-compat';\nclass ExampleComponent extends React.Component {\n  static getDerivedStateFromProps(props, state) {\n  // 此处为 state 更新的逻辑 ...\n  }\n}\n\n// polyfill 你的组件，以便兼容旧版本的 React：\npolyfill(ExampleComponent);\nexport default ExampleComponent;\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br")])])])}),[],!1,null,null,null);n.default=t.exports}}]);